import{bS as n,w as i,aG as e,I as a,x as s,J as p,cQ as t,cR as l,cS as h,cT as c,cU as r}from"./chunks/framework.CqaskQ-N.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"后端/nginx/代理.md","filePath":"后端/nginx/代理.md"}'),o={name:"后端/nginx/代理.md"},d=a(`<h3 id="ubantu-安装-nginx" tabindex="-1">Ubantu 安装 Nginx <a class="header-anchor" href="#ubantu-安装-nginx" aria-label="Permalink to &quot;Ubantu 安装 Nginx&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo apt install nginx</span></span></code></pre></div><h4 id="文件位置" tabindex="-1">文件位置 <a class="header-anchor" href="#文件位置" aria-label="Permalink to &quot;文件位置&quot;">​</a></h4><ul><li>/usr/sbin/nginx：主程序</li><li>/etc/nginx：存放配置文件</li><li>/usr/share/nginx：存放静态文件</li><li>/var/log/nginx：存放日志</li></ul><h4 id="启动命令" tabindex="-1">启动命令 <a class="header-anchor" href="#启动命令" aria-label="Permalink to &quot;启动命令&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>service nginx start  # 启动nginx</span></span>
<span class="line"><span>service nginx reload  # 重新加载nginx配置文件</span></span></code></pre></div><h4 id="另外两个命令" tabindex="-1">另外两个命令 <a class="header-anchor" href="#另外两个命令" aria-label="Permalink to &quot;另外两个命令&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nginx -s reopen            # 重启 Nginx</span></span>
<span class="line"><span>nginx -s stop              # 停止 Nginx</span></span></code></pre></div><h2 id="nginx只有在反向代理时才有缓存" tabindex="-1">Nginx只有在反向代理时才有缓存 <a class="header-anchor" href="#nginx只有在反向代理时才有缓存" aria-label="Permalink to &quot;Nginx只有在反向代理时才有缓存&quot;">​</a></h2>`,9),k=s("h3",{Proxy:"",Setting:"",id:"nginx-conf配置文件-http",tabindex:"-1"},[p("nginx.conf配置文件 http "),s("a",{class:"header-anchor",href:"#nginx-conf配置文件-http","aria-label":'Permalink to "nginx.conf配置文件 http {Proxy Setting}"'},"​")],-1),g=a(`<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>##</span></span>
<span class="line"><span># Proxy Setting</span></span>
<span class="line"><span>##</span></span>
<span class="line"><span>proxy_connect_timeout 10; #服务器连接的超时时间</span></span>
<span class="line"><span>proxy_read_timeout 180; # 连接成功后,等候后端服务器响应时间</span></span>
<span class="line"><span>proxy_send_timeout 5; #后端服务器数据回传时间</span></span>
<span class="line"><span>proxy_buffer_size 16k; #缓冲区的大小</span></span>
<span class="line"><span>proxy_buffers 4 32k; #每个连接设置缓冲区的数量为number，每块缓冲区的大小为size</span></span>
<span class="line"><span>proxy_busy_buffers_size 96k; #开启缓冲响应的功能以后，在没有读到全部响应的情况下，写缓冲到达一定大小时，nginx一定会向客户端发送响应，直到缓冲小于此值。</span></span>
<span class="line"><span>proxy_temp_file_write_size 96k; #设置nginx每次写数据到临时文件的size(大小)限制</span></span>
<span class="line"><span>proxy_temp_path /etc/nginx/temp; #proxy缓存临时文件的大小</span></span>
<span class="line"><span>proxy_cache_path /etc/nginx/cache levels=1:2 keys_zone=cache_one:100m inactive=1d max_size=10g; #设置缓存的路径和其他参数。被缓存的数据如果在inactive参数（当前为1天）指定的时间内未被访问，就会被从缓存中移除</span></span></code></pre></div><h3 id="etc-nginx-temp-和-etc-nginx-cache-文件需要提前创建并赋予权限" tabindex="-1">/etc/nginx/temp 和 /etc/nginx/cache 文件需要提前创建并赋予权限 <a class="header-anchor" href="#etc-nginx-temp-和-etc-nginx-cache-文件需要提前创建并赋予权限" aria-label="Permalink to &quot;/etc/nginx/temp 和 /etc/nginx/cache 文件需要提前创建并赋予权限&quot;">​</a></h3><img src="`+t+`"><h3 id="模拟假设资源在-var-www-example-com-入口在-var-www-html" tabindex="-1">模拟假设资源在 /var/www/example.com，入口在/var/www/html <a class="header-anchor" href="#模拟假设资源在-var-www-example-com-入口在-var-www-html" aria-label="Permalink to &quot;模拟假设资源在 /var/www/example.com，入口在/var/www/html&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>	listen 80 default_server;</span></span>
<span class="line"><span>	listen [::]:80 default_server;</span></span>
<span class="line"><span>	root /var/www/html;</span></span>
<span class="line"><span>	index index.html index.htm index.nginx-debian.html;</span></span>
<span class="line"><span>	server_name _;</span></span>
<span class="line"><span>	#要缓存文件的后缀，可以在以下设置。</span></span>
<span class="line"><span>        location ~ .*\\.(gif|jpg|png|jpeg|css|js)(.*) {</span></span>
<span class="line"><span>                proxy_pass http://127.0.0.1:90; #\bnginx缓存里拿不到资源，向该地址转发请求，拿到新的资源，并进行缓存</span></span>
<span class="line"><span>                proxy_redirect off; #设置后端服务器“Location”响应头和“Refresh”响应头的替换文本</span></span>
<span class="line"><span>                proxy_set_header Host $host; #允许重新定义或者添加发往后端服务器的请求头</span></span>
<span class="line"><span>                proxy_cache cache_one; #指定用于页面缓存的共享内存，对应http层设置的keys_zone</span></span>
<span class="line"><span>                #为不同的响应状态码设置不同的缓存时间</span></span>
<span class="line"><span>                proxy_cache_valid 200 302 24h;</span></span>
<span class="line"><span>                proxy_cache_valid 301 30d;</span></span>
<span class="line"><span>                proxy_cache_valid any 5m;</span></span>
<span class="line"><span>                expires 3m; # 显示给前端缓存时间</span></span>
<span class="line"><span>                add_header wall  &quot;hey!guys!give me a star.&quot;;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>	location / {</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>	listen 90;</span></span>
<span class="line"><span>	listen [::]:90;</span></span>
<span class="line"><span>	root /var/www/example.com;</span></span>
<span class="line"><span>	location / {</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="测试-二次刷新出现" tabindex="-1">测试，二次刷新出现 <a class="header-anchor" href="#测试-二次刷新出现" aria-label="Permalink to &quot;测试，二次刷新出现&quot;">​</a></h3><img src="`+l+'"><h3 id="服务器缓存文件" tabindex="-1">服务器缓存文件 <a class="header-anchor" href="#服务器缓存文件" aria-label="Permalink to &quot;服务器缓存文件&quot;">​</a></h3><img src="'+h+'"><h3 id="删除服务器缓存文件-可以判断是浏览器缓存" tabindex="-1">删除服务器缓存文件，可以判断是浏览器缓存 <a class="header-anchor" href="#删除服务器缓存文件-可以判断是浏览器缓存" aria-label="Permalink to &quot;删除服务器缓存文件，可以判断是浏览器缓存&quot;">​</a></h3><img src="'+c+'"><p>选择disable cancel强制刷新</p><img src="'+r+`"><h3 id="html-禁止浏览器缓存" tabindex="-1">HTML 禁止浏览器缓存 <a class="header-anchor" href="#html-禁止浏览器缓存" aria-label="Permalink to &quot;HTML 禁止浏览器缓存&quot;">​</a></h3><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Expires&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Pragm&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cache-control&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cache&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,15),u=[d,k,g];function _(x,m,E,y,b,v){return e(),i("div",null,u)}const f=n(o,[["render",_]]);export{F as __pageData,f as default};
