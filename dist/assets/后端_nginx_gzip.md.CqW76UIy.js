import{bS as a,w as n,aG as s,I as e}from"./chunks/framework.CqaskQ-N.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"后端/nginx/gzip.md","filePath":"后端/nginx/gzip.md"}'),p={name:"后端/nginx/gzip.md"},t=e(`<h3 id="云服务器nginx-conf自带默认配置" tabindex="-1">云服务器nginx.conf自带默认配置 <a class="header-anchor" href="#云服务器nginx-conf自带默认配置" aria-label="Permalink to &quot;云服务器nginx.conf自带默认配置&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gzip on;  #on 开启</span></span>
<span class="line"><span>gzip_vary on; #是否在http header中添加Vary: Accept-Encoding，建议开启</span></span>
<span class="line"><span>gzip_proxied any; #any 无条件启用压缩</span></span>
<span class="line"><span>gzip_comp_level 6; #压缩等级</span></span>
<span class="line"><span>gzip_buffers 16 8k; #设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。 例如 4 4k 代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存。 4 8k 代表以8k为单位，按照原始数据大小以8k为单位的4倍申请内存。如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。</span></span>
<span class="line"><span>gzip_http_version 1.1; #版本</span></span>
<span class="line"><span>gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; #匹配MIME类型进行压缩，（无论是否指定）&quot;text/html&quot;类型总是会被压缩的。</span></span></code></pre></div><h3 id="开启后-response-headers-会看到" tabindex="-1">开启后 Response Headers 会看到 <a class="header-anchor" href="#开启后-response-headers-会看到" aria-label="Permalink to &quot;开启后 Response Headers 会看到&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Content-Encoding: gzip;</span></span></code></pre></div>`,4),i=[t];function o(c,l,r,d,g,h){return s(),n("div",null,i)}const x=a(p,[["render",o]]);export{u as __pageData,x as default};
